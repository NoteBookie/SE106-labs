#ifndef RED_BLACK_TREE_H
#define RED_BLACK_TREE_H


#include <iostream>        // For NULL
using namespace std;

// Red-black tree class
//
// CONSTRUCTION: with negative infinity object also
//               used to signal failed finds
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x )       --> Insert x
// void remove( x )       --> Remove x (unimplemented)
// bool contains( x )     --> Return true if x is present
// Comparable findMin( )  --> Return smallest item
// Comparable findMax( )  --> Return largest item
// bool isEmpty( )        --> Return true if empty; else false
// void makeEmpty( )      --> Remove all items
// void printTree( )      --> Print tree in sorted order
// ******************ERRORS********************************
// Throws UnderflowException as warranted

template <typename Comparable>
class RedBlackTree
{
  public:
    /**
     * Construct the tree.
     * negInf is a value less than or equal to all others.
     */
    explicit RedBlackTree( const Comparable & negInf )
    {
        nullNode    = new RedBlackNode;
        nullNode->left = nullNode->right = nullNode;
        header      = new RedBlackNode( negInf );
        header->left = header->right = nullNode;
    }

    RedBlackTree( const RedBlackTree & rhs )
    {
        nullNode    = new RedBlackNode;
        nullNode->left = nullNode->right = nullNode;
        header      = new RedBlackNode( rhs.header->element );
        header->left = header->right = nullNode;
        *this = rhs;
    }

    ~RedBlackTree( )
    {
        makeEmpty( );
        delete nullNode;
        delete header;
    }

    const Comparable & findMin( ) const
    {
      //if( isEmpty( ) ) {}
	  

        RedBlackNode *itr = header->right;

        while( itr->left != nullNode )
            itr = itr->left;

        return itr->element;
    }

    const Comparable & findMax( ) const
    {
      //if( isEmpty( ) ){}

        RedBlackNode *itr = header->right;

        while( itr->right != nullNode )
            itr = itr->right;

        return itr->element;
    }

    bool contains( const Comparable & x ) const
    {
        nullNode->element = x;
        RedBlackNode *curr = header->right;

        for( ; ; )
        {
            if( x < curr->element )
                curr = curr->left;
            else if( curr->element < x )
                curr = curr->right;
            else
                return curr != nullNode;
        }
    }

    bool isEmpty( ) const
    {
        return header->right == nullNode;
    }

    void printTree( ) const
    {
        if( header->right == nullNode )
            cout << "Empty tree" << endl;
        else
            printTree( header->right );
    }

    void makeEmpty( )
    {
        reclaimMemory( header->right );
        header->right = nullNode;
    }

    /**
     * Insert item x into the tree. Does nothing if x already prsent.
     */
    void insert( const Comparable & x )
    {
        current = parent = grand = header;
        nullNode->element = x;

        while( current->element != x )
        {
            great = grand; grand = parent; parent = current;
            current = x < current->element ?  current->left : current->right;

                // Check if two red children; fix if so
            if( current->left->color == RED && current->right->color == RED )
                handleReorient( x );
        }

            // Insertion fails if already present
        if( current != nullNode )
            return;
        current = new RedBlackNode( x, nullNode, nullNode );

            // Attach to parent
        if( x < parent->element )
            parent->left = current;
        else
            parent->right = current;
        handleReorient( x );
    }

    void remove( const Comparable & item )
    {
		cout << "remove sth;"<<endl;
		current = parent = grand = header;
		nullNode->element = item;
		current->color = RED;

		while( current->element != item) {
cout<<"loop"<<endl;
			parent = current;
			if( item < parent->element ) {
				current = parent->left;
				sibling = parent->right;
			} else {
				current = parent->right;
				sibling = parent->left;
			}
			handleDeleteReorient( item );
		}
cout <<"reorient end1"<<endl;
		if( current == nullNode ) {
			header->right->color = BLACK;
			return;
		}

		if( isLeaf( current ) ) {
			if( parent->right == current )
				parent->right = nullNode;
			else
				parent->left = nullNode;
		}
		else {
cout <<"out loop"<<endl;
			RedBlackNode* temp = findNextInOrder( current->element, current );
			current->element = temp->element;
			parent = current;
			current = current->right;
			sibling = parent->left;

			while( current != temp ) {
			
				handleDeleteReorient( item );
				parent = current;
				current = current->left;
				sibling = parent->right;
			}

			if( parent->right == current )
				parent->right = current->right;
			else
				parent->left = current->right;

			current->right->color = BLACK;

		}
cout <<"reorient end2"<<endl;
		//Recolor the root black.
		header->right->color = BLACK;
    }

    enum { RED, BLACK };

    const RedBlackTree & operator=( const RedBlackTree & rhs )
    {
        if( this != &rhs )
        {
            makeEmpty( );
            header->right = clone( rhs.header->right );
        }

        return *this;
    }

  private:
    struct RedBlackNode
    {
        Comparable    element;
        RedBlackNode *left;
        RedBlackNode *right;
        int           color;

        RedBlackNode( const Comparable & theElement = Comparable( ),
                            RedBlackNode *lt = NULL, RedBlackNode *rt = NULL,
                            int c = BLACK )
          : element( theElement ), left( lt ), right( rt ), color( c ) { }
    };

    RedBlackNode *header;   // The tree header (contains negInf)
    RedBlackNode *nullNode;

        // Used in insert routine and its helpers (logically static)
    RedBlackNode *current;
    RedBlackNode *parent;
    RedBlackNode *grand;
    RedBlackNode *great;
	RedBlackNode *sibling;

        // Usual recursive stuff
    void reclaimMemory( RedBlackNode *t )
    {
        if( t != t->left )
        {
            reclaimMemory( t->left );
            reclaimMemory( t->right );
            delete t;
        }
    }

    void printTree( RedBlackNode *t ) const
    {
        if( t != t->left )
        {
            printTree( t->left );
            cout << t->element << endl;
            printTree( t->right );
        }
    }

    RedBlackNode * clone( RedBlackNode * t ) const
    {
        if( t == t->left )  // Cannot test against nullNode!!!
            return nullNode;
        else
            return new RedBlackNode( t->element, clone( t->left ),
                                     clone( t->right ), t->color );
    }

        // Red-black tree manipulations
    /**
     * Internal routine that is called during an insertion if a node has two red
     * children. Performs flip and rotatons. item is the item being inserted.
     */
    void handleReorient( const Comparable & item )
    {
            // Do the color flip
        current->color = RED;
        current->left->color = BLACK;
        current->right->color = BLACK;

        if( parent->color == RED )   // Have to rotate
        {
            grand->color = RED;
            if( item < grand->element != item < parent->element )
                parent = rotate( item, grand );  // Start dbl rotate
            current = rotate( item, great );
            current->color = BLACK;
        }
        header->right->color = BLACK; // Make root black
    }

	void handleDeleteReorient(const Comparable & item ) {
		cout <<"reorient"<<endl;
		//Case if the current node is black and the sibling is red.
		if( current->color == BLACK && sibling->color == RED ) {
			grand = rotate( sibling->element, parent );
			grand->color = BLACK;
			grand->left->color = RED;
			grand->right->color = RED;
		}
		//The three cases if both children of current are black.
		else if( current->color == BLACK && sibling->color == BLACK ) {
			if( current->left->color == BLACK
				&& current->right->color == BLACK ) {
				if( sibling->left->color == BLACK
					&& sibling->right->color == BLACK ) {
					parent->color = BLACK;
					current->color = RED;
					sibling->color = RED;
				} else if( sibling->left->color == RED ) {
					grand = rotate( sibling->left->element, parent );
					grand->color = RED;
					grand->left->color = BLACK;
					grand->right->color = BLACK;
					current->color = RED;
				} else if( sibling->right->color == RED ) {
					grand = rotate( sibling->right->element, parent );
					grand->color = RED;
					grand->left->color = BLACK;
					grand->right->color = BLACK;
					current->color = RED;
				}
			}
		}
		
		//For all other cases, either current or one of its children is red,
		//so continue to the next node.
	}

	bool isLeaf( RedBlackNode* t ) {
		if( t != nullNode && t->left == nullNode && t->right == nullNode )
			return true;
		else
			return false;
	}
    RedBlackNode* findMin( RedBlackNode* t ) {
		while( t->left != nullNode && t->left != NULL )
			t = t->left;
		return t;
	}
	RedBlackNode* findNextInOrder( Comparable& item, RedBlackNode* n) {
cout<<"Wrong"<<endl;
		RedBlackNode* next = n;
		while( item > n->element && n->left != nullNode ) {
			n = n->right;
			if( n->right == nullNode )
				return NULL;
		}
		if( item == n->element&& n->right != nullNode ){
			return (findMin(n->right));	
		}
		else if( n->left != nullNode ) {
			next = findNextInOrder( item, n->left );
			if( next == NULL )
				return n;
			else
				return next;
		}
		return NULL;
	}

	/*RedBlackNode* rotate( RedBlackNode* child, RedBlackNode* parent, RedBlackNode* grand ) {
		if( grand->left == parent )
			if( parent->left == child )
				return grand->left = rotateWithLeftChild( parent );
			else
				return grand->left = rotateWithRightChild( parent );
		else
			if( parent->left == child )
				return grand->right = rotateWithLeftChild( parent );
			else
				return grand->right = rotateWithRightChild( parent );
	}*/
    /**
     * Internal routine that performs a single or double rotation.
     * Because the result is attached to the parent, there are four cases.
     * Called by handleReorient.
     * item is the item in handleReorient.
     * theParent is the parent of the root of the rotated subtree.
     * Return the root of the rotated subtree.
     */
    RedBlackNode * rotate( const Comparable & item, RedBlackNode *theParent )
    {
        if( item < theParent->element )
			return theParent->left = (item < theParent->left->element) ?
				rotateWithLeftChild( theParent->left ) :
				rotateWithRightChild( theParent->left );
		else
			return theParent->right = (item < theParent->right->element) ?
				rotateWithLeftChild( theParent->right ) :
				rotateWithRightChild( theParent->right );
        
    }

    RedBlackNode * rotateWithLeftChild( RedBlackNode *  k2 )
    {
        RedBlackNode *k1 = k2->left;
        k2->left = k1->right;
        k1->right = k2;
        return k1;
    }

    RedBlackNode * rotateWithRightChild( RedBlackNode *  k1 )
    {
        RedBlackNode *k2 = k1->right;
        k1->right = k2->left;
        k2->left = k1;
        return k2;
    }
};

#endif
